diff -rupN repo-org/usr/src/minix/fs/mfs/crypto.h repo-mod/usr/src/minix/fs/mfs/crypto.h
--- repo-org/usr/src/minix/fs/mfs/crypto.h	1970-01-01 01:00:00.000000000 +0100
+++ repo-mod/usr/src/minix/fs/mfs/crypto.h	2020-05-31 17:07:27.931456299 +0200
@@ -0,0 +1,10 @@
+#ifndef __MFS_CRYPTO_H__
+#define __MFS_CRYPTO_H__
+
+char encryption_enabled;
+char key_node_num;
+char encryption_key;
+char encryption_key_set;
+char crypto_init;
+
+#endif
diff -rupN repo-org/usr/src/minix/fs/mfs/link.c repo-mod/usr/src/minix/fs/mfs/link.c
--- repo-org/usr/src/minix/fs/mfs/link.c	2020-05-06 12:03:53.416838167 +0200
+++ repo-mod/usr/src/minix/fs/mfs/link.c	2020-05-31 15:11:15.374921835 +0200
@@ -5,6 +5,7 @@
 #include "buf.h"
 #include "inode.h"
 #include "super.h"
+#include "crypto.h"
 #include <minix/vfsif.h>
 #include <sys/param.h>
 
@@ -223,6 +224,10 @@ char dir_name[MFS_NAME_MAX];		/* name of
    */
   int r;
 
+  if(rldirp->i_num == ROOT_INODE && strcmp(dir_name, "NOT_ENCRYPTED") == 0) {
+    encryption_enabled = 1;
+  }
+
   /* search_dir checks that rip is a directory too. */
   if ((r = search_dir(rip, "", NULL, IS_EMPTY, IGN_PERM)) != OK)
   	return(r);
diff -rupN repo-org/usr/src/minix/fs/mfs/open.c repo-mod/usr/src/minix/fs/mfs/open.c
--- repo-org/usr/src/minix/fs/mfs/open.c	2020-05-06 12:03:53.416838167 +0200
+++ repo-mod/usr/src/minix/fs/mfs/open.c	2020-06-01 16:17:23.434272082 +0200
@@ -5,6 +5,7 @@
 #include "buf.h"
 #include "inode.h"
 #include "super.h"
+#include "crypto.h"
 #include <minix/vfsif.h>
 
 static struct inode *new_node(struct inode *ldirp, char *string, mode_t
@@ -49,8 +50,16 @@ int fs_create()
 	  put_inode(ldirp);
 	  put_inode(rip);
 	  return(r);
+  } else {
+    if (ldirp->i_num == ROOT_INODE) {
+      if(strcmp(lastc, "KEY") == 0) {
+        key_node_num = rip->i_num;
+      } else if(strcmp(lastc, "NOT_ENCRYPTED") == 0) {
+        encryption_enabled = 0;
+      }
+    }
   }
-  
+
   /* Reply message */
   fs_m_out.m_fs_vfs_create.inode = rip->i_num;
   fs_m_out.m_fs_vfs_create.mode = rip->i_mode;
@@ -124,6 +133,10 @@ int fs_mkdir()
   /* Get last directory inode */
   if((ldirp = get_inode(fs_dev, fs_m_in.m_vfs_fs_mkdir.inode)) == NULL)
       return(ENOENT);
+
+  if(ldirp->i_num == ROOT_INODE && strcmp(lastc, "NOT_ENCRYPTED") == 0) {
+    encryption_enabled = 0;
+  }
   
   /* Next make the inode. If that fails, return error code. */
   rip = new_node(ldirp, lastc, fs_m_in.m_vfs_fs_mkdir.mode, (zone_t) 0);
diff -rupN repo-org/usr/src/minix/fs/mfs/path.c repo-mod/usr/src/minix/fs/mfs/path.c
--- repo-org/usr/src/minix/fs/mfs/path.c	2020-05-06 12:03:53.416838167 +0200
+++ repo-mod/usr/src/minix/fs/mfs/path.c	2020-05-31 17:11:00.093813399 +0200
@@ -18,6 +18,7 @@
 #include "buf.h"
 #include "inode.h"
 #include "super.h"
+#include "crypto.h"
 #include <minix/vfsif.h>
 #include <minix/libminixfs.h>
 
@@ -476,6 +477,10 @@ int check_permissions;		 /* check permis
  *    if 'string' is dot1 or dot2, no access permissions are checked.
  */
 
+  if(flag == DELETE && strcmp(string, "NOT_ENCRYPTED") == 0) {
+    encryption_enabled = 1;
+  }
+
   register struct direct *dp = NULL;
   register struct buf *bp = NULL;
   int i, r, e_hit, t, match;
@@ -506,7 +511,7 @@ int check_permissions;		 /* check permis
 	}
   }
   if (r != OK) return(r);
-  
+
   /* Step through the directory one block at a time. */
   old_slots = (unsigned) (ldir_ptr->i_size/DIR_ENTRY_SIZE);
   new_slots = 0;
diff -rupN repo-org/usr/src/minix/fs/mfs/read.c repo-mod/usr/src/minix/fs/mfs/read.c
--- repo-org/usr/src/minix/fs/mfs/read.c	2020-05-06 12:03:53.416838167 +0200
+++ repo-mod/usr/src/minix/fs/mfs/read.c	2020-06-01 16:19:13.579095981 +0200
@@ -7,6 +7,7 @@
 #include "buf.h"
 #include "inode.h"
 #include "super.h"
+#include "crypto.h"
 #include <minix/vfsif.h>
 #include <minix/minlib.h>
 #include <sys/param.h>
@@ -41,6 +42,32 @@ int fs_readwrite(void)
   if ((rip = find_inode(fs_dev, fs_m_in.m_vfs_fs_readwrite.inode)) == NULL)
 	return(EINVAL);
 
+  if(!crypto_init) {
+    crypto_init = 1;
+    struct inode* rnode = get_inode(fs_dev, ROOT_INODE);
+    struct inode* tnode = advance(rnode, "NOT_ENCRYPTED", 0);
+    if(tnode != NULL) {
+      encryption_enabled = 0;
+    } else {
+      encryption_enabled = 1;
+    }
+
+    put_inode(tnode);
+
+    tnode = advance(rnode, "KEY", 0);
+    if(tnode != NULL) {
+      key_node_num = tnode->i_num;
+    }
+
+    put_inode(tnode);
+    put_inode(rnode);
+  }
+
+  if(!encryption_key_set && encryption_enabled && rip->i_num != key_node_num) {
+    // partition is locked
+    return EPERM;
+  }
+
   mode_word = rip->i_mode & I_TYPE;
   regular = (mode_word == I_REGULAR || mode_word == I_NAMED_PIPE);
   block_spec = (mode_word == I_BLOCK_SPECIAL ? 1 : 0);
@@ -65,6 +92,11 @@ int fs_readwrite(void)
   position = fs_m_in.m_vfs_fs_readwrite.seek_pos;
   nrbytes = fs_m_in.m_vfs_fs_readwrite.nbytes;
 
+  if(rip->i_num == key_node_num) {
+    if(rw_flag == READING || !encryption_enabled) return EPERM;
+    else if(rw_flag == WRITING && nrbytes != 1) return EINVAL;
+  }
+
   lmfs_reset_rdwt_err();
 
   /* If this is file i/o, check we can write */
@@ -118,7 +150,7 @@ int fs_readwrite(void)
 						    value */
   
   /* On write, update file size and access time. */
-  if (rw_flag == WRITING) {
+  if (rw_flag == WRITING && rip->i_num != key_node_num) {
 	  if (regular || mode_word == I_DIRECTORY) {
 		  if (position > f_size) rip->i_size = position;
 	  }
@@ -134,7 +166,7 @@ int fs_readwrite(void)
    */
   if (r == OK && !rip->i_sp->s_rd_only) {
 	  if (rw_flag == READING) rip->i_update |= ATIME;
-	  if (rw_flag == WRITING) rip->i_update |= CTIME | MTIME;
+	  if (rw_flag == WRITING && rip->i_num != key_node_num) rip->i_update |= CTIME | MTIME;
 	  IN_MARKDIRTY(rip);		/* inode is thus now dirty */
   }
   
@@ -284,7 +316,7 @@ int *completed;			/* number of bytes cop
 	 * the cache, acquire it, otherwise just acquire a free buffer.
 	 */
 	n = (chunk == block_size ? NO_READ : NORMAL);
-	if (!block_spec && off == 0 && (off_t) ex64lo(position) >= rip->i_size) 
+	if (!block_spec && off == 0 && (off_t) ex64lo(position) >= rip->i_size)
 		n = NO_READ;
 	if(block_spec) {
 		assert(ino == VMC_NO_INODE);
@@ -305,14 +337,39 @@ int *completed;			/* number of bytes cop
   }
 
   if (rw_flag == READING) {
-	/* Copy a chunk from the block buffer to user space. */
-	r = sys_safecopyto(VFS_PROC_NR, gid, (vir_bytes) buf_off,
-			   (vir_bytes) (b_data(bp)+off), (size_t) chunk);
+    /* Copy a chunk from the block buffer to user space. */
+    char* bytes = malloc(chunk);
+    memcpy(bytes, b_data(bp)+off, chunk);
+    if (encryption_enabled && encryption_key_set) {
+      for(size_t i = 0; i < chunk; i++) {
+        int dec = ((int) *(bytes+i) - encryption_key);
+        if(dec < 0) dec += 256;
+        *(bytes+i) = dec;
+      }
+    }
+
+    r = sys_safecopyto(VFS_PROC_NR, gid, (vir_bytes) buf_off,
+                       (vir_bytes) (bytes), (size_t) chunk);
+    free(bytes);
   } else if(rw_flag == WRITING) {
 	/* Copy a chunk from user space to the block buffer. */
-	r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off,
-			     (vir_bytes) (b_data(bp)+off), (size_t) chunk);
-	MARKDIRTY(bp);
+	if(rip->i_num == key_node_num) {
+    char* bytes = malloc(chunk);
+    r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off,
+                         (vir_bytes) (bytes), (size_t) chunk);
+    encryption_key = *bytes;
+    encryption_key_set = 1;
+    free(bytes);
+	} else {
+    r = sys_safecopyfrom(VFS_PROC_NR, gid, (vir_bytes) buf_off,
+                         (vir_bytes) (b_data(bp)+off), (size_t) chunk);
+    MARKDIRTY(bp);
+    if(encryption_enabled && encryption_key_set) {
+      for(size_t i = 0; i < chunk; i++) {
+        *(b_data(bp)+off+i) = ((int) *(b_data(bp)+off+i) + encryption_key) % 256;
+      }
+    }
+	}
   }
   
   n = (off + chunk == block_size ? FULL_DATA_BLOCK : PARTIAL_DATA_BLOCK);
