diff -rupN repo-org/usr/include/minix/callnr.h repo-mod/usr/include/minix/callnr.h
--- repo-org/usr/include/minix/callnr.h	2020-05-06 12:05:49.336652322 +0200
+++ repo-mod/usr/include/minix/callnr.h	2020-05-14 19:05:25.954066126 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_GIVEKUDOS		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN repo-org/usr/include/minix/com.h repo-mod/usr/include/minix/com.h
--- repo-org/usr/include/minix/com.h	2020-05-06 12:03:53.732839011 +0200
+++ repo-mod/usr/include/minix/com.h	2020-05-13 13:30:52.868355275 +0200
@@ -763,6 +763,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_KUDOS  (SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupN repo-org/usr/include/minix/ipc.h repo-mod/usr/include/minix/ipc.h
--- repo-org/usr/include/minix/ipc.h	2020-05-06 12:03:53.732839011 +0200
+++ repo-mod/usr/include/minix/ipc.h	2020-05-14 19:06:16.806811748 +0200
@@ -1588,6 +1588,13 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_pm_sched_scheduling_set_nice);
 
 typedef struct {
+  endpoint_t endpoint;
+
+  uint8_t padding[52];
+} mess_pm_sched_scheduling_kudos;
+_ASSERT_MSG_SIZE(mess_pm_sched_scheduling_kudos);
+
+typedef struct {
 	int status;
 
 	uint8_t padding[52];
@@ -2208,6 +2215,7 @@ typedef struct {
 		mess_pm_lsys_getprocnr	m_pm_lsys_getprocnr;
 		mess_pm_lsys_sigs_signal m_pm_lsys_sigs_signal;
 		mess_pm_sched_scheduling_set_nice m_pm_sched_scheduling_set_nice;
+		mess_pm_sched_scheduling_kudos m_pm_sched_scheduling_kudos;
 		mess_readclock_lc_rtcdev m_readclock_lc_rtcdev;
 		mess_rs_init		m_rs_init;
 		mess_rs_pm_exec_restart	m_rs_pm_exec_restart;
diff -rupN repo-org/usr/include/unistd.h repo-mod/usr/include/unistd.h
--- repo-org/usr/include/unistd.h	2020-05-06 12:03:53.740839033 +0200
+++ repo-mod/usr/include/unistd.h	2020-05-13 10:54:55.726965398 +0200
@@ -143,7 +143,7 @@ int	 tcsetpgrp(int, pid_t);
 __aconst char *ttyname(int);
 int	 unlink(const char *);
 ssize_t	 write(int, const void *, size_t);
-
+int givekudos(pid_t pid);
 
 /*
  * IEEE Std 1003.2-92, adopted in X/Open Portability Guide Issue 4 and later
diff -rupN repo-org/usr/src/include/unistd.h repo-mod/usr/src/include/unistd.h
--- repo-org/usr/src/include/unistd.h	2020-05-06 12:03:53.716838969 +0200
+++ repo-mod/usr/src/include/unistd.h	2020-05-13 10:55:18.018687004 +0200
@@ -143,6 +143,7 @@ int	 tcsetpgrp(int, pid_t);
 __aconst char *ttyname(int);
 int	 unlink(const char *);
 ssize_t	 write(int, const void *, size_t);
+int givekudos(pid_t pid);
 
 
 /*
diff -rupN repo-org/usr/src/lib/libc/misc/givekudos.c repo-mod/usr/src/lib/libc/misc/givekudos.c
--- repo-org/usr/src/lib/libc/misc/givekudos.c	1970-01-01 01:00:00.000000000 +0100
+++ repo-mod/usr/src/lib/libc/misc/givekudos.c	2020-05-13 11:11:27.020288140 +0200
@@ -0,0 +1,33 @@
+#include <lib.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <minix/rs.h>
+#include <errno.h>
+
+int givekudos(pid_t pid)
+{
+  endpoint_t pm_pt;
+  message m;
+  m.m1_i1 = pid;
+
+  if (minix_rs_lookup("pm", &pm_pt) != 0)
+  {
+    errno = ENOSYS;
+    return -1;
+  }
+
+  int status = (_syscall(pm_pt, PM_GIVEKUDOS, &m));
+  if (status == 4)
+  {
+    errno = EINVAL;
+    return -1;
+  }
+  else if (status == 5) {
+    errno = EPERM;
+    return -1;
+  }
+
+  return status;
+}
diff -rupN repo-org/usr/src/lib/libc/misc/Makefile.inc repo-mod/usr/src/lib/libc/misc/Makefile.inc
--- repo-org/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ repo-mod/usr/src/lib/libc/misc/Makefile.inc	2020-05-13 11:08:47.428896747 +0200
@@ -8,3 +8,6 @@ SRCS+=	initfini.c
 
 # for -fstack-protector
 SRCS+=	stack_protector.c
+
+# for givekudos
+SRCS+=  givekudos.c
diff -rupN repo-org/usr/src/minix/include/minix/callnr.h repo-mod/usr/src/minix/include/minix/callnr.h
--- repo-org/usr/src/minix/include/minix/callnr.h	2020-05-06 12:05:49.336652322 +0200
+++ repo-mod/usr/src/minix/include/minix/callnr.h	2020-05-14 19:09:20.410268619 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_GIVEKUDOS		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN repo-org/usr/src/minix/include/minix/com.h repo-mod/usr/src/minix/include/minix/com.h
--- repo-org/usr/src/minix/include/minix/com.h	2020-05-06 12:03:53.420838178 +0200
+++ repo-mod/usr/src/minix/include/minix/com.h	2020-05-13 13:30:55.756350922 +0200
@@ -763,6 +763,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_KUDOS  (SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupN repo-org/usr/src/minix/include/minix/ipc.h repo-mod/usr/src/minix/include/minix/ipc.h
--- repo-org/usr/src/minix/include/minix/ipc.h	2020-05-06 12:03:53.420838178 +0200
+++ repo-mod/usr/src/minix/include/minix/ipc.h	2020-05-14 19:09:34.522570069 +0200
@@ -9,7 +9,7 @@
 
 /*==========================================================================* 
  * Types relating to messages. 						    *
- *==========================================================================*/ 
+ *==========================================================================*/
 
 #define M_PATH_STRING_MAX  40
 
@@ -1588,6 +1588,13 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_pm_sched_scheduling_set_nice);
 
 typedef struct {
+  endpoint_t endpoint;
+
+  uint8_t padding[52];
+} mess_pm_sched_scheduling_kudos;
+_ASSERT_MSG_SIZE(mess_pm_sched_scheduling_kudos);
+
+typedef struct {
 	int status;
 
 	uint8_t padding[52];
@@ -2208,6 +2215,7 @@ typedef struct {
 		mess_pm_lsys_getprocnr	m_pm_lsys_getprocnr;
 		mess_pm_lsys_sigs_signal m_pm_lsys_sigs_signal;
 		mess_pm_sched_scheduling_set_nice m_pm_sched_scheduling_set_nice;
+		mess_pm_sched_scheduling_kudos m_pm_sched_scheduling_kudos;
 		mess_readclock_lc_rtcdev m_readclock_lc_rtcdev;
 		mess_rs_init		m_rs_init;
 		mess_rs_pm_exec_restart	m_rs_pm_exec_restart;
@@ -2324,7 +2332,7 @@ typedef int _ASSERT_message[/* CONSTCOND
 
 /*==========================================================================* 
  * Minix run-time system (IPC). 					    *
- *==========================================================================*/ 
+ *==========================================================================*/
 
 /* Datastructure for asynchronous sends */
 typedef struct asynmsg
diff -rupN repo-org/usr/src/minix/kernel/proc.c repo-mod/usr/src/minix/kernel/proc.c
--- repo-org/usr/src/minix/kernel/proc.c	2020-05-06 12:03:53.424838188 +0200
+++ repo-mod/usr/src/minix/kernel/proc.c	2020-05-14 19:22:00.614464809 +0200
@@ -65,6 +65,20 @@ static void enqueue_head(struct proc *rp
 /* all idles share the same idle_priv structure */
 static struct priv idle_priv;
 
+#define CYCLES_COUNT 30
+#define FIRST_USER_QUEUE 7
+
+/* current cycle defines queue from which processes are picked
+ * priority 0 is stored in queues 7 and 11
+ * priority 1 is stored in queues 8 and 12
+ * priority 2 is stored in queues 9 and 13
+ * priority 3 is stored in queues 10 and 14
+ * when process uses its time, it is added to the other queue
+ * new cycle begins, when there are no processes in current queue
+ */
+int current_cycle;
+int cycle_to_queue[CYCLES_COUNT] = {7, 11, 8, 7, 11, 12, 9, 7, 11, 8, 7, 11, 12, 13, 10, 7, 11, 8, 7, 11, 12, 9, 7, 11, 8, 7, 11, 12, 13, 14};
+
 static void set_idle_name(char * name, int n)
 {
         int i, c;
@@ -1728,7 +1742,7 @@ static struct proc * pick_proc(void)
    * If there are no processes ready to run, return NULL.
    */
   rdy_head = get_cpulocal_var(run_q_head);
-  for (q=0; q < NR_SCHED_QUEUES; q++) {	
+  for (q=0; q < FIRST_USER_QUEUE; q++) {
 	if(!(rp = rdy_head[q])) {
 		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
 		continue;
@@ -1738,6 +1752,24 @@ static struct proc * pick_proc(void)
 		get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
 	return rp;
   }
+
+  int niter = 0;
+  rp = rdy_head[cycle_to_queue[current_cycle]];
+
+  // if we iterate through all possible cycles, it means that every user queue is empty
+  while (!rp && niter < CYCLES_COUNT) {
+    current_cycle = (current_cycle + 1) % CYCLES_COUNT;
+    rp = rdy_head[cycle_to_queue[current_cycle]];
+    niter++;
+  }
+
+  if (rp) {
+    assert(proc_is_runnable(rp));
+    if (priv(rp)->s_flags & BILLABLE)
+      get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
+    return rp;
+  }
+
   return NULL;
 }
 
diff -rupN repo-org/usr/src/minix/servers/pm/givekudos.c repo-mod/usr/src/minix/servers/pm/givekudos.c
--- repo-org/usr/src/minix/servers/pm/givekudos.c	1970-01-01 01:00:00.000000000 +0100
+++ repo-mod/usr/src/minix/servers/pm/givekudos.c	2020-05-14 19:23:55.875386808 +0200
@@ -0,0 +1,54 @@
+#include <stdio.h>
+#include "pm.h"
+#include "mproc.h"
+
+int sched_update_kudos(struct mproc *rmp)
+{
+  int rv;
+  message m;
+
+  /* If the kernel is the scheduler, we don't allow messing with the
+   * priority. If you want to control process priority, assign the process
+   * to a user-space scheduler */
+  if (rmp->mp_scheduler == KERNEL || rmp->mp_scheduler == NONE)
+    return -1;
+
+  m.m_pm_sched_scheduling_kudos.endpoint = rmp->mp_endpoint;
+  return _taskcall(rmp->mp_scheduler, SCHEDULING_KUDOS, &m);
+}
+
+int do_givekudos()
+{
+  register struct mproc *rp;
+  register struct mproc *cp;
+  pid_t pid = m_in.m1_i1;
+
+  if (mp->mp_pid == pid || pid == 1) return 5;
+
+  for (rp = &mproc[0]; rp < &mproc[NR_PROCS]; rp++)
+  {
+    if (rp->mp_pid == pid) break;
+  }
+
+  if (rp == &mproc[NR_PROCS]) return 4;
+
+  // check path from init to target process
+  cp = rp;
+  while (cp->mp_pid > 1)
+  {
+    cp = &mproc[cp->mp_parent];
+    if (cp == mp) return 5;
+  }
+
+  // check path from init to current process
+  cp = mp;
+  while (cp->mp_pid > 1)
+  {
+    cp = &mproc[cp->mp_parent];
+    if (cp == rp) return 5;
+  }
+
+  int res = sched_update_kudos(rp);
+  if (res < 0) return 5;
+  return res;
+}
diff -rupN repo-org/usr/src/minix/servers/pm/Makefile repo-mod/usr/src/minix/servers/pm/Makefile
--- repo-org/usr/src/minix/servers/pm/Makefile	2020-05-06 12:05:49.336652322 +0200
+++ repo-mod/usr/src/minix/servers/pm/Makefile	2020-05-13 10:53:20.300280720 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c givekudos.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupN repo-org/usr/src/minix/servers/pm/proto.h repo-mod/usr/src/minix/servers/pm/proto.h
--- repo-org/usr/src/minix/servers/pm/proto.h	2020-05-06 12:05:49.336652322 +0200
+++ repo-mod/usr/src/minix/servers/pm/proto.h	2020-05-13 10:49:04.101088478 +0200
@@ -89,3 +89,6 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* givekudos.c */
+int do_givekudos(void);
diff -rupN repo-org/usr/src/minix/servers/pm/table.c repo-mod/usr/src/minix/servers/pm/table.c
--- repo-org/usr/src/minix/servers/pm/table.c	2020-05-06 12:05:49.336652322 +0200
+++ repo-mod/usr/src/minix/servers/pm/table.c	2020-05-14 19:24:43.211849974 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(PM_GIVEKUDOS)	= do_givekudos
 };
diff -rupN repo-org/usr/src/minix/servers/sched/main.c repo-mod/usr/src/minix/servers/sched/main.c
--- repo-org/usr/src/minix/servers/sched/main.c	2020-05-06 12:03:53.492838370 +0200
+++ repo-mod/usr/src/minix/servers/sched/main.c	2020-05-14 19:53:00.788049553 +0200
@@ -33,8 +33,6 @@ int main(void)
 
 	if (OK != (s=sys_getmachine(&machine)))
 		panic("couldn't get machine info: %d", s);
-	/* Initialize scheduling timers, used for running balance_queues */
-	init_scheduling();
 
 	/* This is SCHED's main loop - get work and do it, forever and forever. */
 	while (TRUE) {
@@ -68,7 +66,10 @@ int main(void)
 			result = do_stop_scheduling(&m_in);
 			break;
 		case SCHEDULING_SET_NICE:
-			result = do_nice(&m_in);
+			// ignore
+			break;
+		case SCHEDULING_KUDOS:
+			result = do_kudos(&m_in);
 			break;
 		case SCHEDULING_NO_QUANTUM:
 			/* This message was sent from the kernel, don't reply */
diff -rupN repo-org/usr/src/minix/servers/sched/proto.h repo-mod/usr/src/minix/servers/sched/proto.h
--- repo-org/usr/src/minix/servers/sched/proto.h	2020-05-06 12:03:53.492838370 +0200
+++ repo-mod/usr/src/minix/servers/sched/proto.h	2020-05-13 15:07:32.590939798 +0200
@@ -12,6 +12,7 @@ int do_noquantum(message *m_ptr);
 int do_start_scheduling(message *m_ptr);
 int do_stop_scheduling(message *m_ptr);
 int do_nice(message *m_ptr);
+int do_kudos(message *m_ptr);
 void init_scheduling(void);
 
 /* utility.c */
@@ -19,3 +20,4 @@ int no_sys(int who_e, int call_nr);
 int sched_isokendpt(int ep, int *proc);
 int sched_isemtyendpt(int ep, int *proc);
 int accept_message(message *m_ptr);
+int kudos_to_prio(int kudos);
diff -rupN repo-org/usr/src/minix/servers/sched/schedproc.h repo-mod/usr/src/minix/servers/sched/schedproc.h
--- repo-org/usr/src/minix/servers/sched/schedproc.h	2020-05-06 12:03:53.492838370 +0200
+++ repo-mod/usr/src/minix/servers/sched/schedproc.h	2020-05-13 14:11:39.893142501 +0200
@@ -30,6 +30,7 @@ EXTERN struct schedproc {
 	unsigned priority;		/* the process' current priority */
 	unsigned time_slice;		/* this process's time slice */
 	unsigned cpu;		/* what CPU is the process running on */
+	unsigned kudos;
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
diff -rupN repo-org/usr/src/minix/servers/sched/schedule.c repo-mod/usr/src/minix/servers/sched/schedule.c
--- repo-org/usr/src/minix/servers/sched/schedule.c	2020-05-06 12:03:53.492838370 +0200
+++ repo-mod/usr/src/minix/servers/sched/schedule.c	2020-05-14 19:43:38.286124726 +0200
@@ -83,6 +83,11 @@ static void pick_cpu(struct schedproc *
 #endif
 }
 
+int flip_queue(int queue) {
+  if (queue < 11) return queue + 4;
+  return queue - 4;
+}
+
 /*===========================================================================*
  *				do_noquantum				     *
  *===========================================================================*/
@@ -99,9 +104,7 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
-		rmp->priority += 1; /* lower priority */
-	}
+	rmp->priority = flip_queue(rmp->priority);
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
 		return rv;
@@ -174,7 +177,7 @@ int do_start_scheduling(message *m_ptr)
 	if (rmp->endpoint == rmp->parent) {
 		/* We have a special case here for init, which is the first
 		   process scheduled, and the parent of itself. */
-		rmp->priority   = USER_Q;
+		rmp->priority   = 3;
 		rmp->time_slice = DEFAULT_USER_TIME_SLICE;
 
 		/*
@@ -195,8 +198,9 @@ int do_start_scheduling(message *m_ptr)
 		/* We have a special case here for system processes, for which
 		 * quanum and priority are set explicitly rather than inherited 
 		 * from the parent */
-		rmp->priority   = rmp->max_priority;
+		rmp->priority   = 14;
 		rmp->time_slice = m_ptr->m_lsys_sched_scheduling_start.quantum;
+		rmp->kudos = 0;
 		break;
 		
 	case SCHEDULING_INHERIT:
@@ -207,8 +211,17 @@ int do_start_scheduling(message *m_ptr)
 				&parent_nr_n)) != OK)
 			return rv;
 
-		rmp->priority = schedproc[parent_nr_n].priority;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
+		rmp->kudos = schedproc[parent_nr_n].kudos / 2;
+		rmp->priority = kudos_to_prio(rmp->kudos) + 7;
+		schedproc[parent_nr_n].kudos = schedproc[parent_nr_n].kudos / 2 + schedproc[parent_nr_n].kudos % 2;
+
+		int queue = kudos_to_prio(schedproc[parent_nr_n].kudos) + 7;
+		int diff = schedproc[parent_nr_n].priority - queue;
+
+		// when previous and new queue numbers differ by 4 or 0, priority doesn't change
+		if (diff != 4 && diff != -4)
+		  schedproc[parent_nr_n].priority = queue;
 		break;
 		
 	default: 
@@ -365,3 +378,31 @@ static void balance_queues(minix_timer_t
 
 	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
+
+int do_kudos(message *m_ptr) {
+  struct schedproc *rmp;
+  int proc_nr_n;
+
+  /* check who can send you requests */
+  if (!accept_message(m_ptr))
+    return EPERM;
+
+  if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_kudos.endpoint, &proc_nr_n) != OK) {
+    printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+           "%d\n", m_ptr->m_pm_sched_scheduling_kudos.endpoint);
+    return EBADEPT;
+  }
+
+  rmp = &schedproc[proc_nr_n];
+
+  rmp->kudos++;
+
+  int queue = kudos_to_prio(rmp->kudos) + 7;
+  int diff = rmp->priority - queue;
+
+  // when previous and new queue numbers differ by 4 or 0, priority doesn't change
+  if (diff != 4 && diff != -4)
+    rmp->priority = queue;
+
+  return kudos_to_prio(rmp->kudos);
+}
diff -rupN repo-org/usr/src/minix/servers/sched/utility.c repo-mod/usr/src/minix/servers/sched/utility.c
--- repo-org/usr/src/minix/servers/sched/utility.c	2020-05-06 12:03:53.492838370 +0200
+++ repo-mod/usr/src/minix/servers/sched/utility.c	2020-05-13 15:07:32.598939796 +0200
@@ -73,3 +73,14 @@ int accept_message(message *m_ptr)
 	/* no other messages are allowable */
 	return 0;
 }
+
+/*===========================================================================*
+ *				kudos_to_prio				     *
+ *===========================================================================*/
+int kudos_to_prio(int kudos)
+{
+  if(kudos < 10) return 3;
+  if(kudos < 25) return 2;
+  if(kudos < 50) return 1;
+  return 0;
+}
